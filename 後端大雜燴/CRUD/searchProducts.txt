	@GetMapping("/searchProducts")
	public ResponseEntity<List<Product>> getProducts(@ModelAttribute ProductQueryParameter param) {
		String keyword = param.getKeyword();
		String orderBy = param.getOrderBy();
		String sortRule = param.getSortRule();
		Comparator<Product> comparator = genSortComparator(orderBy, sortRule);
		List<Product> products = productDB.stream()
				.filter(p -> p.getName().toUpperCase().contains(keyword.toUpperCase())).sorted(comparator)
				.collect(Collectors.toList());

		return ResponseEntity.ok().body(products);
	}

	private Comparator<Product> genSortComparator(String orderBy, String sortRule) {
		Comparator<Product> comparator = (p1, p2) -> 0;
		if (Objects.isNull(orderBy) || Objects.isNull(sortRule)) {
			return comparator;
		}

		if (orderBy.equalsIgnoreCase("price")) {
			comparator = Comparator.comparing(Product::getPrice);
		} else if (orderBy.equalsIgnoreCase("name")) {
			comparator = Comparator.comparing(Product::getName);
		}

		return sortRule.equalsIgnoreCase("desc") ? comparator.reversed() : comparator;
	}